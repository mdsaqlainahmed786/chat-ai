// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                    @id @default(cuid())
  clerkId        String                    @unique // Clerk userId
  email          String?                   @unique
  firstName      String?
  lastName       String?
  imageUrl       String?
  provider       String? // "google" | "email"
  inviteLink     String?                   @unique
  membership     Membership?
  membershipId   String?
  membershipPlan MembershipPlan?           @default(BASIC)
  chats          ConversationParticipant[]
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  Message        Message[]
}

model Membership {
  id             String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @unique
  plan           MembershipPlan
  aiMessagesLeft Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  pairKey      String?                   @unique
  isGroup      Boolean                   @default(false)
  participants ConversationParticipant[]
  messages     Message[]
  createdAt    DateTime                  @default(now())
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String? // text content
  imageUrl       String? // optional image URL (Cloudinary)
  isAi           Boolean  @default(false)
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])
}

enum MembershipPlan {
  BASIC
  STANDARD
  PREMIUM
}
